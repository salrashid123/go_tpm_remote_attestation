syntax = "proto3";

package verifier;

option go_package = "github.com/salrashid123/rungo_tpm_remote_attestation/verifier";

service Verifier {
  rpc GetPlatformCert (GetPlatformCertRequest) returns (GetPlatformCertResponse) { }
  rpc GetEKCert (GetEKCertRequest) returns (GetEKCertResponse) { }
  rpc GetAK (GetAKRequest) returns (GetAKResponse) { }
  rpc ActivateCredential (ActivateCredentialRequest) returns (ActivateCredentialResponse) { }
  rpc Quote (QuoteRequest) returns (QuoteResponse) { }
  rpc PushSecret (PushSecretRequest) returns (PushSecretResponse) { }
  rpc PullRSAKey (PullRSAKeyRequest) returns (PullRSAKeyResponse) { }      
}

enum SecretType {
  RAW = 0;
  RSA = 1;
  AES = 2;
}  

message GetPlatformCertRequest {
  string uid = 1;
}

message GetPlatformCertResponse {
  string uid = 1;
  bytes platformCert = 2;
}

message GetEKCertRequest {
  string uid = 1;
}

message GetEKCertResponse {
  string uid = 1;
  bytes ekCert = 2;
}

message GetAKRequest {
  string uid = 1;
}

message GetAKResponse {
  string uid = 1;
  bytes ekPub = 2;
  bytes akName = 3;  
  bytes akPub = 4;
}

message ActivateCredentialRequest {
  string uid = 1;
  bytes credBlob = 2;
  bytes encryptedSecret = 3;
}

message ActivateCredentialResponse {
  string uid = 1;
  bytes secret = 2;
}

message QuoteRequest {
  string uid = 1;
  int32 pcr = 2;
  string secret =3;
}

message QuoteResponse {
  string uid = 1;
  bytes attestation = 2;
  bytes signature = 3;
  bytes eventlog = 4;  
}

message PushSecretRequest {
  string uid = 1;
  SecretType secret_type = 2;
  bytes importBlob = 3;  
}

message PushSecretResponse {
  string uid = 1;
  bytes verification = 2;  
}

message PullRSAKeyRequest {
  string uid = 1;
  int32 pcr = 2;
}

message PullRSAKeyResponse {
  string uid = 1;
  bytes tpm_public_key = 2;
  bytes test_signature = 3;
  bytes attestation_signature = 4;
  bytes attestation = 5;
}
